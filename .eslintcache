[{"/home/juho/development/gis/roadtrip-front/src/functions/GoogleMaps.tsx":"1","/home/juho/development/gis/roadtrip-front/src/reportWebVitals.ts":"2","/home/juho/development/gis/roadtrip-front/src/components/AsynchronousField.tsx":"3","/home/juho/development/gis/roadtrip-front/src/containers/SearchContainer.tsx":"4","/home/juho/development/gis/roadtrip-front/src/App.tsx":"5","/home/juho/development/gis/roadtrip-front/src/containers/MapContainer.tsx":"6","/home/juho/development/gis/roadtrip-front/src/components/GoogleMap.tsx":"7","/home/juho/development/gis/roadtrip-front/src/components/Directions.tsx":"8","/home/juho/development/gis/roadtrip-front/src/containers/ListContainer.tsx":"9","/home/juho/development/gis/roadtrip-front/src/components/ListItem.tsx":"10","/home/juho/development/gis/roadtrip-front/src/containers/Modal.tsx":"11"},{"size":2505,"mtime":1609070204813,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1608550895928,"results":"14","hashOfConfig":"13"},{"size":3156,"mtime":1609077040492,"results":"15","hashOfConfig":"13"},{"size":970,"mtime":1609077017901,"results":"16","hashOfConfig":"13"},{"size":4376,"mtime":1609082633660,"results":"17","hashOfConfig":"13"},{"size":783,"mtime":1609078588759,"results":"18","hashOfConfig":"13"},{"size":5984,"mtime":1609082289615,"results":"19","hashOfConfig":"13"},{"size":1708,"mtime":1608725967197,"results":"20","hashOfConfig":"13"},{"size":1836,"mtime":1609078265756,"results":"21","hashOfConfig":"13"},{"size":1576,"mtime":1609077792915,"results":"22","hashOfConfig":"13"},{"size":1987,"mtime":1609077184051,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5dvhz4",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/juho/development/gis/roadtrip-front/src/functions/GoogleMaps.tsx",[],"/home/juho/development/gis/roadtrip-front/src/reportWebVitals.ts",[],"/home/juho/development/gis/roadtrip-front/src/components/AsynchronousField.tsx",[],"/home/juho/development/gis/roadtrip-front/src/containers/SearchContainer.tsx",[],"/home/juho/development/gis/roadtrip-front/src/App.tsx",["48","49","50","51","52","53","54"],"import React from \"react\";\nimport Nav from \"./components/Nav\";\n\nimport \"./App.css\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport SearchContainer from \"./containers/SearchContainer\";\nimport MapContainer from \"./containers/MapContainer\";\nimport ListContainer from \"./containers/ListContainer\";\nimport Modal from \"./containers/Modal\";\nimport { PlaceDetailResult, CalculateDirections } from \"./functions/GoogleMaps\";\nimport DirectionServiceProvider from \"./components/Directions\";\nimport { LoadScript } from \"@react-google-maps/api\";\nimport { useForceUpdate } from \"./components/ForceUpdate\";\n\ntype Center = {\n  lat: number;\n  lng: number;\n};\nfunction App() {\n  const forceUpdate = useForceUpdate();\n  const [listItems, setListItems] = React.useState<PlaceDetailResult[] | any[]>(\n    []\n  );\n  const [startLocation, setStartLocation] = React.useState<\n    PlaceDetailResult | undefined\n  >(undefined);\n  const [endLocation, setEndLocation] = React.useState<\n    PlaceDetailResult | undefined\n  >(undefined);\n  const [directions, setDirections] = React.useState<\n    google.maps.DirectionsResult | undefined\n  >(undefined);\n  const [getDirection, setGetDirection] = React.useState(false);\n  const [center, setCenter] = React.useState<Center | undefined>(undefined);\n  const [zoom, setZoom] = React.useState<number | undefined>(undefined);\n  const setCenteredStartLocation = (value: PlaceDetailResult | undefined) => {\n    if (!value) {\n      listItems.shift();\n      setZoom(10);\n      return;\n    }\n    listItems.unshift(value);\n\n    setCenter(value?.geometry.location);\n    setZoom(15);\n  };\n  const setCenteredEndLocation = (value: PlaceDetailResult | undefined) => {\n    if (!value) {\n      listItems.pop();\n      setZoom(10);\n      return;\n    }\n    listItems.push(value);\n\n    setCenter(value?.geometry.location);\n    setZoom(15);\n  };\n  const addWayPoint = (item: any) => {\n    //get information about the place by getplacebyID?\n    // another thing, update the sortable list to also update the parent component as its only modifying only its state!\n    console.log(\"Hello\");\n    listItems.splice(listItems.length - 1, 0, item); //second last\n    forceUpdate();\n  };\n  const removeListItem = (item: any) => {\n    console.log(item);\n  };\n  /*   const waypoints: google.maps.DirectionsWaypoint[] = [\n    {\n      location: {\n        placeId:\n          \"EkRZdWthcsSxeXVydMOndSwgVHVya3VheiBUT0vEsCBLb251dGxhcsSxLCBZZW5pbWFoYWxsZS9BbmthcmEsIFR1cmtleSIuKiwKFAoSCS-XDrbIF9MUEapL8pEF-aeHEhQKEgm7_ePb2BfTFBFclxP5MimZ4g\",\n      },\n    },\n    {\n      location: {\n        placeId: \"ChIJozelNqR3jEYRiKcLSo-Jths\",\n      },\n    },\n  ]; */\n  return (\n    <div className=\"App\">\n      <Nav />\n      <div style={{ padding: 20 }}>\n        <LoadScript googleMapsApiKey=\"AIzaSyC9JS6BGxWFhmhzMNrOkUtymM_uM8tU_V4\">\n          <Grid container spacing={3}>\n            <Grid item xs={8}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={getDirection}\n                onClick={() => {\n                  setDirections(undefined);\n                  setGetDirection(true);\n                  setTimeout(() => {\n                    setGetDirection(false);\n                  }, 1000);\n                }}\n              >\n                Get route\n              </Button>\n              <Modal\n                setStartLocation={setCenteredStartLocation}\n                setEndLocation={setCenteredEndLocation}\n              />\n              {!directions && getDirection && (\n                <DirectionServiceProvider\n                  destination={{\n                    placeId: listItems[listItems.length - 1].place_id,\n                  }}\n                  origin={{ placeId: listItems[0].place_id }}\n                  outputDirections={(directions) => setDirections(directions)}\n                  /*   waypoints={waypoints} */\n                />\n              )}\n              <MapContainer\n                center={center}\n                zoom={zoom}\n                directions={directions}\n                addWayPoint={addWayPoint}\n                removeListItem={removeListItem}\n              />\n            </Grid>\n            <Grid item xs={4}>\n              <ListContainer items={listItems ? listItems : []} />\n            </Grid>\n          </Grid>\n        </LoadScript>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/juho/development/gis/roadtrip-front/src/containers/MapContainer.tsx",["55","56","57","58"],"/home/juho/development/gis/roadtrip-front/src/components/GoogleMap.tsx",["59","60","61","62","63","64"],"import React from \"react\";\nimport {\n  DirectionsRenderer,\n  DirectionsService,\n  GoogleMap,\n  LoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport DirectionServiceProvider from \"./Directions\";\nimport { PlaceDetailResult, NearbySearch } from \"../functions/GoogleMaps\";\nimport { Button } from \"@material-ui/core\";\n\nvar polyline = require(\"google-polyline\");\n\nconst containerStyle = {\n  height: \"70vh\",\n  width: \"100%\",\n};\nfunction PolygonArray(latitude: any) {\n  const R = 6378137;\n  const pi = 3.14;\n  //distance in meters\n  const upper_offset = 1000;\n  const lower_offset = -1000;\n  let Lat_up = upper_offset / R;\n  let Lat_down = lower_offset / R;\n  //OffsetPosition, decimal degrees\n  let lat_upper = latitude + (Lat_up * 180) / pi;\n  let lat_lower = latitude + (Lat_down * 180) / pi;\n  return [lat_upper, lat_lower];\n}\n\nfunction PolygonPoints(waypoints: any) {\n  let polypoints = waypoints;\n  let PolyLength = polypoints.length;\n  let UpperBound = [];\n  let LowerBound = [];\n  for (let j = 0; j <= PolyLength - 1; j++) {\n    let NewPoints = PolygonArray(polypoints[j][0]);\n    UpperBound.push({ lat: NewPoints[0], lng: polypoints[j][1] });\n    LowerBound.push({ lat: NewPoints[1], lng: polypoints[j][1] });\n  }\n  let reversebound = LowerBound.reverse();\n  let FullPoly = UpperBound.concat(reversebound);\n  return FullPoly;\n}\n\nfunction MyComponent({\n  center,\n  zoom,\n  directions,\n  addWayPoint,\n  removeListItem,\n}: {\n  center?: {\n    lat: number;\n    lng: number;\n  };\n  zoom?: number;\n  directions?: google.maps.DirectionsResult;\n  addWayPoint: (item: any) => void;\n  removeListItem: (item: any) => void;\n}) {\n  const [markers, setMarkers] = React.useState<any | undefined>(undefined);\n  const [map, setMap] = React.useState<any | null>(null);\n\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds();\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  const getNearbyStuff = async () => {\n    let results: any[] = [];\n    let waypoints = [];\n    if (directions && map !== null) {\n      waypoints = polyline.decode(directions.routes[0].overview_polyline);\n      for (let i = 0; i < waypoints.length; i += 40) {\n        const res = await NearbySearch({\n          location: {\n            lat: waypoints[i][0],\n            lng: waypoints[i][1],\n          },\n          radius: 20000,\n          type: \"restaurant\",\n        });\n        results = results.concat(res.results);\n      }\n      console.log(results);\n      setMarkers(results);\n      for (const location of results) {\n      }\n    }\n  };\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          getNearbyStuff();\n        }}\n      >\n        Get stuff\n      </Button>\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={\n          center\n            ? center\n            : {\n                lat: 61.05499289999999,\n                lng: 28.1896628,\n              }\n        }\n        zoom={zoom ? zoom : 14}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n      >\n        {/* Child components, such as markers, info windows, etc. */}\n        <>\n          {directions && (\n            <DirectionsRenderer\n              options={{\n                directions: directions,\n              }}\n              // optional\n              onLoad={(directionsRenderer) => {\n                console.log(\n                  \"DirectionsRenderer onLoad directionsRenderer: \",\n                  directionsRenderer\n                );\n              }}\n              // optional\n              onUnmount={(directionsRenderer) => {\n                console.log(\n                  \"DirectionsRenderer onUnmount directionsRenderer: \",\n                  directionsRenderer\n                );\n              }}\n            />\n          )}\n          <Markers items={markers} addWayPoint={addWayPoint} />\n        </>\n      </GoogleMap>\n    </>\n  );\n}\nconst Stars = (stars: any) => {\n  console.log(stars);\n  if (!stars) return <></>;\n  const numberOfStars = Math.round(stars.stars);\n  console.log(numberOfStars);\n  const goldenStar = (\n    <span style={{ fontSize: \"15px\", color: \"red\" }}>&#9733;</span>\n  );\n  const greyStar = (\n    <span style={{ fontSize: \"15px\", color: \"black\" }}>&#9733;</span>\n  );\n  return (\n    <>\n      {numberOfStars > 0 ? goldenStar : greyStar}\n      {numberOfStars > 1 ? goldenStar : greyStar}\n      {numberOfStars > 2 ? goldenStar : greyStar}\n      {numberOfStars > 3 ? goldenStar : greyStar}\n      {numberOfStars > 4 ? goldenStar : greyStar}\n    </>\n  );\n};\nconst Markers = ({ items, addWayPoint }: any) => {\n  const [selectedMarker, setSelectedMarker] = React.useState<any | undefined>(\n    undefined\n  );\n  return (\n    <>\n      {items &&\n        items.map((marker: any) => (\n          <Marker\n            key={marker.geometry.location.lat + marker.name}\n            position={marker.geometry.location}\n            onClick={() => {\n              setSelectedMarker(marker);\n            }}\n          />\n        ))}\n      {selectedMarker && (\n        <InfoWindow\n          onCloseClick={() => {\n            setSelectedMarker(null);\n          }}\n          position={{\n            lat: selectedMarker.geometry.location.lat + 0.0001,\n            lng: selectedMarker.geometry.location.lng,\n          }}\n        >\n          <div>\n            <h3 style={{ marginBottom: \"2px\" }}>{selectedMarker.name}</h3>\n            <Stars stars={selectedMarker.rating} />\n            <div>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  addWayPoint(selectedMarker);\n                }}\n              >\n                Add waypoint\n              </Button>\n            </div>\n          </div>\n        </InfoWindow>\n      )}\n      )\n    </>\n  );\n};\nexport default React.memo(MyComponent);\n","/home/juho/development/gis/roadtrip-front/src/components/Directions.tsx",[],"/home/juho/development/gis/roadtrip-front/src/containers/ListContainer.tsx",["65"],"/home/juho/development/gis/roadtrip-front/src/components/ListItem.tsx",["66","67"],"/home/juho/development/gis/roadtrip-front/src/containers/Modal.tsx",["68"],{"ruleId":"69","severity":1,"message":"70","line":6,"column":8,"nodeType":"71","messageId":"72","endLine":6,"endColumn":23},{"ruleId":"69","severity":1,"message":"73","line":10,"column":29,"nodeType":"71","messageId":"72","endLine":10,"endColumn":48},{"ruleId":"69","severity":1,"message":"74","line":21,"column":21,"nodeType":"71","messageId":"72","endLine":21,"endColumn":33},{"ruleId":"69","severity":1,"message":"75","line":24,"column":10,"nodeType":"71","messageId":"72","endLine":24,"endColumn":23},{"ruleId":"69","severity":1,"message":"76","line":24,"column":25,"nodeType":"71","messageId":"72","endLine":24,"endColumn":41},{"ruleId":"69","severity":1,"message":"77","line":27,"column":10,"nodeType":"71","messageId":"72","endLine":27,"endColumn":21},{"ruleId":"69","severity":1,"message":"78","line":27,"column":23,"nodeType":"71","messageId":"72","endLine":27,"endColumn":37},{"ruleId":"69","severity":1,"message":"79","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":19},{"ruleId":"69","severity":1,"message":"80","line":1,"column":21,"nodeType":"71","messageId":"72","endLine":1,"endColumn":31},{"ruleId":"69","severity":1,"message":"81","line":3,"column":8,"nodeType":"71","messageId":"72","endLine":3,"endColumn":19},{"ruleId":"69","severity":1,"message":"82","line":4,"column":10,"nodeType":"71","messageId":"72","endLine":4,"endColumn":27},{"ruleId":"69","severity":1,"message":"83","line":4,"column":3,"nodeType":"71","messageId":"72","endLine":4,"endColumn":20},{"ruleId":"69","severity":1,"message":"84","line":6,"column":3,"nodeType":"71","messageId":"72","endLine":6,"endColumn":13},{"ruleId":"69","severity":1,"message":"85","line":10,"column":8,"nodeType":"71","messageId":"72","endLine":10,"endColumn":32},{"ruleId":"69","severity":1,"message":"82","line":11,"column":10,"nodeType":"71","messageId":"72","endLine":11,"endColumn":27},{"ruleId":"69","severity":1,"message":"86","line":34,"column":10,"nodeType":"71","messageId":"72","endLine":34,"endColumn":23},{"ruleId":"69","severity":1,"message":"87","line":96,"column":18,"nodeType":"71","messageId":"72","endLine":96,"endColumn":26},{"ruleId":"69","severity":1,"message":"88","line":2,"column":10,"nodeType":"71","messageId":"72","endLine":2,"endColumn":16},{"ruleId":"69","severity":1,"message":"89","line":4,"column":8,"nodeType":"71","messageId":"72","endLine":4,"endColumn":22},{"ruleId":"69","severity":1,"message":"90","line":7,"column":8,"nodeType":"71","messageId":"72","endLine":7,"endColumn":17},{"ruleId":"69","severity":1,"message":"91","line":3,"column":8,"nodeType":"71","messageId":"72","endLine":3,"endColumn":17},"@typescript-eslint/no-unused-vars","'SearchContainer' is defined but never used.","Identifier","unusedVar","'CalculateDirections' is defined but never used.","'setListItems' is assigned a value but never used.","'startLocation' is assigned a value but never used.","'setStartLocation' is assigned a value but never used.","'endLocation' is assigned a value but never used.","'setEndLocation' is assigned a value but never used.","'Container' is defined but never used.","'Typography' is defined but never used.","'SearchField' is defined but never used.","'PlaceDetailResult' is defined but never used.","'DirectionsService' is defined but never used.","'LoadScript' is defined but never used.","'DirectionServiceProvider' is defined but never used.","'PolygonPoints' is defined but never used.","'location' is assigned a value but never used.","'render' is defined but never used.","'CardActionArea' is defined but never used.","'CardMedia' is defined but never used.","'TextField' is defined but never used."]